package com.message.controller;import com.common.model.PageData;import com.common.request.ServiceCall;import com.common.response.ResponseResult;import com.github.pagehelper.PageInfo;import com.message.core.base.BaseController;import com.message.core.base.BaseService;import com.message.domain.output.MessageGroupEmployeeOutput;import com.message.domain.output.MessageGroupOutput;import com.message.model.MessageGroup;import com.message.model.Users;import com.message.service.MessageGroupService;import io.swagger.annotations.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import javax.servlet.http.HttpServletRequest;import java.beans.IntrospectionException;import java.lang.reflect.InvocationTargetException;import java.util.List;/** * @author: XiGuoQing * @description: * @date: Created in 下午 4:49 2018/10/23 0023 * @modified by: */@RestController@RequestMapping(value = "/messageGroup")@Api(value = "短信小组Controller", description = "短信小组", tags = {"短信小组操作接口"})public class MessageGroupController extends BaseController<MessageGroupOutput, MessageGroup, Integer> {    @Autowired    private MessageGroupService messageGroupService;    @Autowired    private LoadBalancerClient loadBalancerClient;    @Override    public BaseService<MessageGroupOutput, MessageGroup, Integer> getService() {        return messageGroupService;    }//  @ApiOperation(value="新增或修改短信小组",notes = "新增或修改短信小组的方法")//  @RequestMapping(value = "/form", method = RequestMethod.POST)//  public ResponseResult formPost(//     Integer id, @Validated @RequestBody @ApiParam(name="短信小组",value="传入json格式",required = false) MessageGroup messageGroup)//     throws Exception{//    if(id==null){//      if(messageGroupService.getByName(messageGroup.getName())!=null){//        return ResponseResult.error("名称重复，请重新填写名称");//      }//      messageGroup.setDisplayOrder(0);//      var groupId = messageGroupService.add(messageGroup);//      if(groupId<0){//        return ResponseResult.error(SYS_EORRO);//      }//      messageGroup.setId(groupId);//       return messageGroupService.addGroup(messageGroup);//    }else {//      MessageGroup messageGroup1=messageGroupService.getById(id);//      if(!messageGroup.getName().equals(messageGroup1.getName())){//        if(messageGroupService.getByName(messageGroup.getName())!=null){//          return ResponseResult.error("名称重复，请重新填写名称");//        }//      }//      messageGroupService.deleteEmployeeByGroupId(id);//      if(messageGroupService.update(id,messageGroup)<0){//        return ResponseResult.error(SYS_EORRO);//      }//      messageGroup.setId(id);//      return messageGroupService.addGroup(messageGroup);//    }////  }    @Override    @ApiOperation(value = "新增或修改短信小组", notes = "新增或修改短信小组的方法")    @RequestMapping(value = "/form", method = RequestMethod.POST)    public ResponseResult formPost(Integer id, @Validated @RequestBody @ApiParam(name = "短信小组", value = "传入json格式") MessageGroup messageGroup) throws InvocationTargetException, IntrospectionException, MethodArgumentNotValidException, IllegalAccessException {        if (id == null) {            if(messageGroup.getDescription()==null||messageGroup.getDescription()==""){                messageGroup.setDescription("  ");            }            //新增            if (messageGroupService.getByName(messageGroup.getName()) != null) {                return ResponseResult.error("名称重复，请重新填写名称");            }            messageGroup.setDisplayOrder(0);            Integer messageGroupId = messageGroupService.add(messageGroup);            if (messageGroupId < 0) {                return ResponseResult.error(SYS_EORRO);            }            return ResponseResult.success("新增成功");        }        //跟新        MessageGroupOutput messageGroupOutput = messageGroupService.getById(id);        if (messageGroup.getName().equals(messageGroupOutput.getName())) {            if(messageGroup.getDescription()==null||messageGroup.getDescription()==""){                messageGroup.setDescription(" ");            }            Integer messageGroupId = messageGroupService.update(id, messageGroup);            if (messageGroupId < 0) {                return ResponseResult.error(SYS_EORRO);            }            return ResponseResult.success("跟新成功");        }else {            if (messageGroupService.getByName(messageGroup.getName()) != null) {                return ResponseResult.error("名称重复，请重新填写名称");            }            Integer messageGroupId = messageGroupService.update(id, messageGroup);            if (messageGroupId < 0) {                return ResponseResult.error(SYS_EORRO);            }            return ResponseResult.success("跟新成功");        }    }    @Override    @ApiOperation("逻辑删除")    @GetMapping(value = "logicDelete")    public ResponseResult logicDelete(String idList) {        int result = messageGroupService.logicDelete(idList);        if (result < 0) {            return ResponseResult.error("删除失败");        }        return ResponseResult.success("删除成功");    }    //查看短信小组    @Override    @GetMapping(value = "get")    public ResponseResult get(Integer id) {        return super.selectById(id);    }    /**     * 获取分页的短信小组列表     */    @GetMapping(value = "/findPageList")    @ApiOperation("获取分页的短信小组列表")    @ApiImplicitParams({            @ApiImplicitParam(name = "name", value = "短信小组名称", required = false, dataType = "string", paramType = "query")    })    public ResponseResult findPageList(HttpServletRequest request) {        Users users = this.getService().getUsers();        Integer level = this.getService().getUsers().getAdministratorLevel();        if(level == 9){            PageData pageData = new PageData(request);            return super.selectPageList(pageData);        }        Integer createdUserId = users.getId();        PageData pageData = new PageData(request);        pageData.put("createdUserId", createdUserId);        return super.selectPageList(pageData);    }    @GetMapping(value = "/findAll")    @ApiOperation("获取分页的短信小组列表")    @ApiImplicitParams({            @ApiImplicitParam(name = "name", value = "短信小组名称", required = false, dataType = "string", paramType = "query")    })    public ResponseResult findAll(HttpServletRequest request) {        Users users = this.getService().getUsers();        Integer level = this.getService().getUsers().getAdministratorLevel();        if(level == 9){            PageData pageData = new PageData(request);            return super.selectAll(pageData);        }        Integer createdUserId = users.getId();        PageData pageData = new PageData(request);        pageData.put("createdUserId", createdUserId);        return super.selectAll(pageData);    }    /**     * 得到小组成员的关联表的数据     */    @GetMapping(value = "/getGroupEmployees")    @ApiImplicitParams({            @ApiImplicitParam(name = "employeesNo", value = "人员工号",  dataType = "string", paramType = "query"),            @ApiImplicitParam(name = "employeesName", value = "人员姓名",  dataType = "string", paramType = "query"),            @ApiImplicitParam(name = "phone", value = "人员手机号码",  dataType = "string", paramType = "query"),            @ApiImplicitParam(name = "organizationId", value = "组织id",  dataType = "int", paramType = "query"),            @ApiImplicitParam(name = "messageGroupId", value = "短信小组id",  dataType = "int", paramType = "query"),    })    public ResponseResult getGroupEmployees(HttpServletRequest request) {        PageData pageData = new PageData(request);        List<MessageGroupEmployeeOutput> messageGroupEmployeeOutputList = messageGroupService.getGroupEmployees(pageData);        PageInfo pageInfo = new PageInfo(messageGroupEmployeeOutputList);        return ResponseResult.success(pageInfo);    }    /**     * 用于获取人员的数据     *     * @param request     * @return     */    @GetMapping(value = "/getEmployees")    @ApiOperation("获取所有员工")    public ResponseResult getEmployees(HttpServletRequest request) {        RestTemplate restTemplate = new RestTemplate();        ResponseResult response = ServiceCall.getResult(loadBalancerClient, restTemplate, "/employees/findPageList", "personnel", null, request);        if (response.getCode() == 200) {            return response;        }        return ResponseResult.error("获取人员列表为空");    }    /**     * 新增短信小组人员名单     */    @GetMapping(value = "/addMessageGroup")    @ApiOperation("添加小组成员")    public ResponseResult addMessageGroup(Integer messageGroupId,  String empIdList) throws IntrospectionException, MethodArgumentNotValidException, IllegalAccessException, InvocationTargetException {        if(messageGroupId == null){            return ResponseResult.error(PARAM_EORRO);        }        int result = messageGroupService.addMessageGroup(messageGroupId, empIdList);        if (result < 0) {            return ResponseResult.error("添加失败");        }        return ResponseResult.success("添加成功");    }    /**     * 删除短信小组人员名单     */    @GetMapping(value = "/deleteMessageGroup")    @ApiOperation("删除小组成员")    public ResponseResult deleteMessageGroup(String idList) {        if (idList == null) {            return ResponseResult.error("请选择小组人员");        }        int result = messageGroupService.deleteMessageGroup(idList);        if (result < 0) {            return ResponseResult.error("删除失败");        }        return ResponseResult.success("删除成功");    }    @GetMapping(value = "/getZtree")    public ResponseResult getTree(HttpServletRequest request) {        RestTemplate restTemplate = new RestTemplate();        ResponseResult response = ServiceCall.getResult(loadBalancerClient, restTemplate, "/organization/getZtree", "personnel", null, request);        if (response.getCode() == 200) {            return response;        }        return ResponseResult.error("获取人员列表为空");    }}