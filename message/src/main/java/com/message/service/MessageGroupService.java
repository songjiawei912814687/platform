package com.message.service;import com.common.model.PageData;import com.github.pagehelper.PageHelper;import com.message.core.base.BaseMapper;import com.message.core.base.BaseService;import com.message.core.base.MybatisBaseMapper;import com.message.domain.output.MessageGroupEmployeeOutput;import com.message.domain.output.MessageGroupOutput;import com.message.mapper.jpa.MessageGroupRepository;import com.message.mapper.mybatis.MessageGroupEmployeeMapper;import com.message.mapper.mybatis.MessageGroupMapper;import com.message.model.MessageGroup;import com.message.model.MessageGroupEmployee;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.MethodArgumentNotValidException;import javax.servlet.http.HttpServletRequest;import java.beans.IntrospectionException;import java.lang.reflect.InvocationTargetException;import java.util.List;/** * @author: XiGuoQing * @description: * @date: Created in 下午 4:46 2018/10/23 0023 * @modified by: */@Service@Transactionalpublic class MessageGroupService extends BaseService<MessageGroupOutput, MessageGroup,Integer> {  @Autowired  private MessageGroupRepository messageGroupRepository;  @Autowired  private MessageGroupMapper messageGroupMapper;  @Autowired  private MessageGroupEmployeeService messageGroupEmployeeService;  @Autowired  private MessageGroupEmployeeMapper messageGroupEmployeeMapper;  @Autowired  private HttpServletRequest request;  @Override  public BaseMapper<MessageGroup, Integer> getMapper() {    return messageGroupRepository;  }  @Override  public MybatisBaseMapper<MessageGroupOutput> getMybatisBaseMapper() {    return messageGroupMapper;  }  public MessageGroupOutput getByName(String name) {    return  messageGroupMapper.selectByName(name);  }//  public ResponseResult addGroup(MessageGroup messageGroup) throws InvocationTargetException, IntrospectionException, MethodArgumentNotValidException, IllegalAccessException {////    if(messageGroup.getEmployeeIds().size() > 0) {//      for (var eId : messageGroup.getEmployeeIds()) {//        MessageGroupEmployee messageGroupEmployee = new MessageGroupEmployee();//        messageGroupEmployee.setEmployeeId(eId);//        //根据员工的id查询出员工的姓名，组织手机号码，工号，手机号码，插入到小组人员表中//        EmployeesOutput employeesOutput = messageGroupEmployeeMapper.selectByEmployeesId(eId);//        messageGroupEmployee.setEmployeeId(employeesOutput.getEmployeeId());//        messageGroupEmployee.setEmployeeName(employeesOutput.getEmployeeName());//        messageGroupEmployee.setEmployeePhone(employeesOutput.getTel());//        messageGroupEmployee.setGroupId(messageGroup.getId());//        messageGroupEmployeeService.add(messageGroupEmployee);//      }//      return ResponseResult.success();//    }//    return ResponseResult.error("没有人员，保存失败");//  }  //  @Override  public MessageGroupOutput getById(Integer id){    MessageGroupOutput messageGroupOutput = messageGroupMapper.selectByPrimaryKey(id);    return messageGroupOutput;  }  public int deleteEmployeeByGroupId(Integer id){    return messageGroupEmployeeMapper.deleteBygroupId(id);  }  @Override  public int logicDelete(String idList){    var strs = idList.split(",");    for(var str : strs){      Integer groupId = Integer.parseInt(str);      MessageGroup messageGroup = messageGroupMapper.selectByPrimaryKey(groupId);      if(messageGroup!=null){        messageGroup.setAmputated(1);      }      int result = messageGroupMapper.updateByPrimaryKeySelective(messageGroup);      if(result==0){        return ERROR;      }      List<MessageGroupEmployeeOutput> groupEmployeeList = messageGroupEmployeeMapper.selectByGroupId(groupId);      for(MessageGroupEmployee messageGroupEmployee:groupEmployeeList){        int result1 = messageGroupEmployeeMapper.deleteBygroupId(messageGroupEmployee.getGroupId());        if(result1<0){          return ERROR;        }      }    }    return SUCCESS;  }  public List<MessageGroupEmployeeOutput> getGroupEmployees(PageData pageData){    PageHelper.startPage(pageData.getPageIndex(),pageData.getRows());    List<MessageGroupEmployeeOutput> employeeOutputList = messageGroupEmployeeMapper.selectByPageData(pageData);    return employeeOutputList;  }  public List<MessageGroupEmployeeOutput> getGroupEmployeesAll(Integer messageGroupId){    List<MessageGroupEmployeeOutput> employeeOutputList = messageGroupEmployeeMapper.selectByGroupId(messageGroupId);    return employeeOutputList;  }  public int addMessageGroup(Integer messageGroupId, String empIdList) throws InvocationTargetException, IntrospectionException, MethodArgumentNotValidException, IllegalAccessException {    //如果不选择人员也返回成功    if(empIdList == null){      return SUCCESS;    }    var empIds = empIdList.split(",");      for(var sempId : empIds){        var empId = Integer.parseInt(sempId);        //查询员工是否在小组成员中        int count = messageGroupEmployeeMapper.selectCountByEmpIdAndGroupId(empId,messageGroupId);        if(count >0){          continue;        }        MessageGroupEmployee messageGroupEmployee = new MessageGroupEmployee();        messageGroupEmployee.setEmployeeId(empId);        messageGroupEmployee.setGroupId(messageGroupId);        int addId = messageGroupEmployeeService.add(messageGroupEmployee);        if(addId<0){          return ERROR;        }      }    return SUCCESS;  }  public int deleteMessageGroup(String idList){    var empIds = idList.split(",");    for(var groupEmpId : empIds){      Integer empId = Integer.parseInt(groupEmpId);      int result = messageGroupEmployeeMapper.deleteByPrimaryKey(empId);      if(result<0){        return ERROR;      }    }    return SUCCESS;  }}