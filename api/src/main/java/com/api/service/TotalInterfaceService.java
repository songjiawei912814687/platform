package com.api.service;import com.alibaba.fastjson.JSONObject;import com.api.config.RedisComponent;import com.api.core.base.BaseMapper;import com.api.core.base.BaseService;import com.api.core.base.MybatisBaseMapper;import com.api.domain.output.BigDataDoTrendOutput;import com.api.domain.output.TotalInterfaceOutput;import com.api.mapper.jpa.ConfigRepository;import com.api.mapper.jpa.ScreenConfigRepository;import com.api.mapper.jpa.TotalInterfaceRepository;import com.api.mapper.mybatis.FeedbackInfoMapper;import com.api.mapper.mybatis.OrganizationMapper;import com.api.mapper.mybatis.TotalInterfaceMapper;import com.api.mapper.mybatis.WindowMapper;import com.api.model.Config;import com.api.model.MapCenter;import com.api.model.TotalInterface;import com.common.Enum.AuditStateEnum;import com.common.model.PageData;import com.common.request.GetConfig;import com.common.response.ResponseResult;import com.google.common.collect.Lists;import org.apache.http.HttpRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;import org.springframework.stereotype.Service;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * @author: XiGuoQing * @description: * @date: Created in 下午 2:07 2018/10/30 0030 * @modified by: */@Servicepublic class TotalInterfaceService extends BaseService<TotalInterfaceOutput, TotalInterface,Integer> {  @Autowired  private TotalInterfaceRepository totalInterfaceRepository;  @Autowired  private TotalInterfaceMapper totalInterfaceMapper;  @Autowired  private FeedbackInfoMapper feedbackInfoMapper;  @Autowired  private ConfigRepository configRepository;  @Autowired  private MapCenterService mapCenterService;  @Autowired  private RedisComponent redisComponent;  @Override  public BaseMapper<TotalInterface, Integer> getMapper() {    return totalInterfaceRepository;  }  @Override  public MybatisBaseMapper<TotalInterfaceOutput> getMybatisBaseMapper() {    return totalInterfaceMapper;  }  public static final Integer IS_USE = 0;  public static final Integer UN_USE = 1;  public ResponseResult selectCount(){    Object obj = redisComponent.getHash("totalInterface","totalInterface");    if(obj!=null){      return ResponseResult.success(JSONObject.parse(obj.toString()));    }    TotalInterface totalInterface = new TotalInterface();    Config config = configRepository.findByConfigKey("办件总量");    if(config==null){      return ResponseResult.success();    }    //state 0为有效参数    if(IS_USE.equals(config.getState())){      totalInterface.setAllCount(Integer.valueOf(config.getConfigValue()));    }else {      //否则查出总的办件量      totalInterface.setAllCount(feedbackInfoMapper.selectSum());    }    List<MapCenter> mapCenterList = mapCenterService.selectCount();    Integer windowCount = 0;    for(MapCenter mapCenter:mapCenterList){      windowCount += mapCenter.getWindowCount();    }    //窗口模块下所有窗口数    totalInterface.setWindowCount(windowCount);    redisComponent.setHash("totalInterface","totalInterface", JSONObject.toJSON(totalInterface).toString(),8*60*60L);    return ResponseResult.success(totalInterface);  }}