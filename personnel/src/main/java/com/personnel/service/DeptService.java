package com.personnel.service;import com.common.model.PageData;import com.common.response.ResponseResult;import com.common.utils.HttpRequestUtil;import com.google.common.collect.Lists;import com.personnel.core.base.BaseMapper;import com.personnel.core.base.BaseService;import com.personnel.core.base.MybatisBaseMapper;import com.personnel.mapper.jpa.DeptRepository;import com.personnel.mapper.mybatis.DeptMapper;import com.personnel.model.Dept;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.MethodArgumentNotValidException;import java.beans.IntrospectionException;import java.lang.reflect.InvocationTargetException;import java.util.*;/** * @author: Administrator */@Servicepublic class DeptService {  @Autowired  private DeptRepository deptRepository;  @Value("${hik.getDeptInfos_URL}")  private String getDeptInfos_URL;  public Map<String,Object> addDept() {    PageData pageData = new PageData();    pageData.put("pageNo",1);    pageData.put("pageSize",1000);    ResponseResult responseResult = HttpRequestUtil.sendPostRequest(getDeptInfos_URL,pageData);    Map<String, Object> dataList = (Map<String, Object>) responseResult.getData();    if(addDeptInfos(dataList)){      return dataList;    }    return null;  }  @Transactional(rollbackFor = RuntimeException.class)  public boolean addDeptInfos(Map<String,Object> dataList) {    List<Dept> deptList = Lists.newArrayList();    var values = (ArrayList<Object>) dataList.get("list");    for (int i = 0; i < values.size(); i++) {      Map<String, Object> deptMap = (Map<String, Object>) values.get(i);      String deptUuid = (String) deptMap.get("deptUuid");      String deptNo = (String) deptMap.get("deptNo");      String deptName = (String) deptMap.get("deptName");      String deptPinyin = (String) deptMap.get("deptPinyin");      String deptPath = (String) deptMap.get("deptPath");      String parentDeptUuid = (String) deptMap.get("parentDeptUuid");      Long updTime = (Long) deptMap.get("updTime");      Dept dept = new Dept();      dept.setDeptUuid(deptUuid);      dept.setDeptNo(deptNo);      dept.setDeptName(deptName);      dept.setDeptPinyin(deptPinyin);      dept.setDeptPath(deptPath);      dept.setParentDeptUuid(parentDeptUuid);      dept.setUpdTime(updTime);      deptList.add(dept);    }    Integer size = deptRepository.saveAll(deptList).size();    if(size>0){      return true;    }    return false;  }}